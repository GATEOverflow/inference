void StartTest(SystemUnderTest* sut,
               QuerySampleLibrary* qsl,
               const TestSettings& settings);

typedef uint64_t QuerySample;

struct QuerySampleResponse {
  void* data;
  size_t size;  // Size in bytes.
};

class SystemUnderTest {
 public:
  virtual ~SystemUnderTest() {}
  virtual const std::string& Name() const = 0;
  virtual void IssueQuery(intptr_t query_id, QuerySample* samples,
                          size_t sample_count) = 0;
};

// SUT calls this to indicate completion of an SystemUnderTest::IssueQuery.
void QueryComplete(intptr_t query_id, QuerySampleResponse* responses,
                   size_t response_count);

class QuerySampleLibrary {
 public:
  virtual ~QuerySampleLibrary() {}
  virtual const std::string& Name() const = 0;

  // For accuracy mode.
  virtual const size_t TotalSampleCount() = 0;

  // For performance mode.
  // Returns the number of samples that are guaranteed to fit in RAM.
  // LoadGen will select a random subset of indicies to load.
  virtual const size_t PerformanceSampleCount() = 0;

  // Loads the requested query samples into memory.
  // Paired with calls to UnloadSamplesFromRam.
  // The load generator will never load a currently loaded sample.
  virtual void LoadSamplesToRam(QuerySample* samples,
                                size_t sample_count) = 0;

  // Unloads the requested query samples from memory.
  // The load generator will never unload a currently unloaded sample.
  virtual void UnloadSamplesFromRam(QuerySample* samples,
                                    size_t sample_count) = 0;
};



